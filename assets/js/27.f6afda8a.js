(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{394:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"화살표-함수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#화살표-함수"}},[t._v("#")]),t._v(" 화살표 함수")]),t._v(" "),a("p",[t._v("화살표 함수는 보다 짧고 간결한 함수 표현이 가능해서 많이 사용되는 함수 표현입니다. 그러나, "),a("code",[t._v("function")]),t._v(" 키워드를 사용하여 만드는 일반적인 함수와 차이점이 있어, 주의하지 않고 사용하면 예기치 못한 오류를 마주할 수도 있습니다.")]),t._v(" "),a("h2",{attrs:{id:"화살표-함수는-this를-바인딩하지-않습니다"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#화살표-함수는-this를-바인딩하지-않습니다"}},[t._v("#")]),t._v(" 화살표 함수는 this를 바인딩하지 않습니다")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  hello"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("위 코드의 출력결과는 어떻게 될까요? 일반적인 생각으로, "),a("code",[t._v("say()")]),t._v(" 메소드는 "),a("code",[t._v("obj")]),t._v(" 객체의 멤버이므로, "),a("code",[t._v("say()")]),t._v("메소드에서 호출하는 "),a("code",[t._v("this.hello")]),t._v("는 "),a("code",[t._v("obj.hello")]),t._v(", 즉, 출력 결과는 "),a("code",[t._v("world!")]),t._v("가 될 것으로 예상할 수 있습니다."),a("br"),t._v(" "),a("br"),t._v("\n그러나, 실제 위 코드를 실행해보면 "),a("code",[t._v("undefined")]),t._v("가 출력되는 것을 볼 수 있습니다."),a("br"),t._v(" "),a("br"),t._v("\n일반함수는 호출 방식에 따라 "),a("code",[t._v("this")]),t._v("에 바인딩할 객체가 결정되는 반면, 화살표 함수의 "),a("code",[t._v("this")]),t._v("는 무조건 상위 스코프의 "),a("code",[t._v("this")]),t._v("를 가리킵니다. 또한, "),a("code",[t._v("prototype")]),t._v(", "),a("code",[t._v("arguments")]),t._v(", "),a("code",[t._v("super")]),t._v(" 역시 존재하지 않고, 생성자로 사용할 수가 없습니다."),a("br"),t._v(" "),a("br"),t._v("\n위 코드에서 "),a("code",[t._v("undefined")]),t._v("가 출력된 것은, "),a("code",[t._v("say()")]),t._v(" 메소드가 화살표 함수이기 때문에, 메소드 내의 "),a("code",[t._v("this")]),t._v("가 메소드를 소유한 "),a("code",[t._v("obj")]),t._v(" 객체가 아닌, 상위 스코프인 "),a("code",[t._v("window")]),t._v(" 객체, 즉 전역객체를 가리키기 때문에 발생한 현상입니다."),a("br"),t._v(" "),a("br"),t._v("\n이처럼, 객체의 메소드로 화살표 함수를 사용하면 예상치 못한 오류를 발생시킬 수 있습니다.")]),t._v(" "),a("br"),t._v("\n화살표 함수는 축약 문법을 지원하기 때문에, 콜백으로 짧은 함수를 넘겨야 할 때 유용하게 사용될 수 있습니다.\n"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 다음 네개의 메소드는 모두 동일한 결과를 출력합니다 */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("param")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 매개변수가 한개인 경우, 파라미터 괄호를 생략할 수 있습니다.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("b")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("param")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 본문이 한 줄인 경우, 본문 괄호를 생략할 수 있으며, 이 때 작성한 표현식의 값을 return 합니다.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("c")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("param")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 위 두 특성을 조합하여 사용할 수도 있습니다.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("param")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);